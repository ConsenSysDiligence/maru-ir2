fun main()
locals a: i16, b: i16, c: u8, e: bool;
{
    entry:
        c := u8(255);
        c := c + u8(1);
        assert(c == u8(0));
        c := c - u8(1);
        assert(c == u8(255));

        b := i16(32767);

        b := b + i16(1);
        assert b == i16(-32768);

        b := i16(-2);
        a := i16(16384);

        b := b * a;
        assert(b == i16(-32768));

        assert(b >> i8(2) == i16(-8192));

        assert(b << i8(1) == i16(0));

        a := i16(-3);
        b := i16(3);

        assert(a ** b == i16(-27));

        a := i16(125);
        b := i16(7);

        assert(a / b == i16(17));

        assert !(u256(1) < u256(1));
        assert u256(1) <= u256(1);
        assert i32(4) < i32(5);
        assert u64(7) > u64(6);
        assert i64(6) >= i64(6);
        assert !(i48(5) > i48(5));

        assert (u256(1) == u256(1));
        assert !(u256(1) == u256(2));
        assert u256(1) != u256(2);
        assert !(i128(2) != i128(2));

        a := i16(37);
        b := i16(1024);

        assert (a | b == i16(1061));
        assert (a & b == i16(0));
        assert (a ^ b == i16(1061));

        b := i16(122);

        assert (a | b == i16(127));
        assert (a & b == i16(32));
        assert (a ^ b == i16(95));

        a := -i16(5);
        

        assert(-a == i16(5));

        e := false;
        assert(!e);

        assert (true || false);
        assert (true || true);
        assert !(false || false);

        assert !(true && false);
        assert (true && true);
        assert !(false && false);
        return;
}
